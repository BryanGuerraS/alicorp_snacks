import os
from dotenv import load_dotenv
import streamlit as st
import openai

# Carga de variables
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# T√≠tulo de pesta√±a o P√°gina
st.set_page_config(page_title="Alicorp AI-Studio", page_icon="assets/alicorp_logo_corto_32x32.png", layout="wide")

# Funci√≥n para definir el prompt y la l√≥gica de negocio
def generar_descripcion_producto(nombre_producto, ingredientes, beneficios, publico, tono):
    """
    Llama a la API de OpenAI para generar descripciones de producto.
    """
    try:
        prompt = f"""
        Act√∫a como un copywriter experto para Alicorp, especializado en productos de consumo masivo y snacks saludables.
        Tu tarea es generar tres (3) descripciones de producto creativas y atractivas para un nuevo lanzamiento.

        **Informaci√≥n del Producto:**
        - **Nombre:** {nombre_producto}
        - **Ingredientes Clave:** {ingredientes}
        - **Beneficios Principales:** {beneficios}
        - **P√∫blico Objetivo:** {publico}

        **Requerimientos:**
        1.  El tono de la comunicaci√≥n debe ser: **{tono}**.
        2.  Genera tres variantes distintas:
            - **Variante 1 (Para E-commerce):** Una descripci√≥n detallada (2-3 p√°rrafos), optimizada para SEO, mencionando los ingredientes y beneficios.
            - **Variante 2 (Para Redes Sociales - Instagram/Facebook):** Un copy corto y pegadizo (2-3 l√≠neas), con un llamado a la acci√≥n claro y usando emojis relevantes.
            - **Variante 3 (Para Campa√±as de Email):** Un texto persuasivo y ligeramente m√°s personal, enfocado en resolver una necesidad del p√∫blico objetivo.
        3.  Formatea la respuesta usando Markdown para que sea f√°cil de leer, con t√≠tulos claros para cada variante.
        """
        
        response = openai.chat.completions.create(
            model="gpt-4o-mini", # M√°s barato de openai
            messages=[
                {"role": "system", "content": "Eres un asistente de marketing de IA para Alicorp."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7, # Un poco de creatividad
            max_tokens=800
        )
        return response.choices[0].message.content

    except Exception as e:
        return f"Error al conectar con la API de OpenAI: {e}"

# Interfaz de Usuario
st.image("assets/alicorp_logo_completo.png", width=150)
st.title("üöÄ Alicorp AI-Studio") # h1
st.caption("Una herramienta de IA Generativa para acelerar tus lanzamientos")

# Usaremos columnas para un dise√±o m√°s limpio
col1, col2 = st.columns([1, 1.5]) 

with col1:
    st.subheader("1. Ingresa los datos del producto") # h3
    nombre_producto = st.text_input("Nombre del Producto", "Barras de Energ√≠a 'Bryan Boost'")
    ingredientes = st.text_input("Ingredientes Clave", "Quinua, kiwicha, maca")
    beneficios = st.text_area("Beneficios Principales", "Fuente de energ√≠a natural, alto en fibra, sin az√∫car a√±adida, ideal para media ma√±ana.", height=70)
    publico = st.text_area("P√∫blico Objetivo", "J√≥venes profesionales y estudiantes universitarios (20-35 a√±os) que buscan snacks saludables y pr√°cticos.", height=70)
    
    tonos_disponibles = ["Moderno y Energ√©tico", "Confiable y Nutritivo", "Divertido y Juvenil", "Sofisticado y Premium"]
    tono = st.selectbox("Elige el tono de comunicaci√≥n", tonos_disponibles)
    
    if st.button("‚ú® Generar Descripciones"):
        if not all([nombre_producto, ingredientes, beneficios, publico, tono]):
            st.warning("Por favor, completa todos los campos.")
        else:
            with st.spinner("Generando... Alimentamos ideas para un ma√±ana mejor..."):
                descripcion_generada = generar_descripcion_producto(nombre_producto, ingredientes, beneficios, publico, tono)
                # Guardamos el resultado en el estado de la sesi√≥n para mostrarlo en la otra columna
                st.session_state['descripcion_generada'] = descripcion_generada

with col2:
    st.subheader("2. Resultados Generados por IA")
    if 'descripcion_generada' in st.session_state:
        st.markdown(st.session_state['descripcion_generada'])
    else:
        st.info("Aqu√≠ aparecer√°n las descripciones generadas por la IA.")

# Almacenar input y output en historial dentro de las carpetas